from adapt.intent import IntentBuilder
from alice.messagebus.message import Message
from alice import AliceSkill, intent_handler


class StopSkill(AliceSkill):
    def __init__(self):
        super().__init__(name="StopSkill")

    @intent_handler(IntentBuilder("").require("Stop"))
    def handle_stop(self, event):
        # Framework catches this, invokes stop() method on all skills
        self.bus.emit(Message("alice.stop"))

    ######################################################################
    # Typically the enclosure will handle all of the following
    # NOTE: system.update is generated by skill-version-checker
    ######################################################################

    @intent_handler("reboot.intent")
    def handle_reboot(self, event):
        if self.ask_yesno("confirm.reboot") == "yes":
            self.bus.emit(Message("system.reboot"))

    @intent_handler("shutdown.intent")
    def handle_shutdown(self, event):
        if self.ask_yesno("confirm.shutdown") == "yes":
            self.bus.emit(Message("system.shutdown"))

    @intent_handler('wifi.setup.intent')
    def handle_wifi_setup(self, event):
        self.bus.emit(Message("system.wifi.setup"))

    @intent_handler('ssh.enable.intent')
    def handle_ssh_enable(self, event):
        self.bus.emit(Message("system.ssh.enable"))

    @intent_handler('ssh.disable.intent')
    def handle_ssh_disable(self, event):
        self.bus.emit(Message("system.ssh.disable"))

def create_skill():
    return StopSkill()
